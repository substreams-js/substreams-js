// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sf/substreams/sink/service/v1/service.proto (package sf.substreams.sink.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Package } from "../../../v1/package_pb.js";

/**
 * @generated from enum sf.substreams.sink.service.v1.DeploymentStatus
 */
export enum DeploymentStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * @generated from enum value: FAILING = 2;
   */
  FAILING = 2,

  /**
   * @generated from enum value: PAUSED = 3;
   */
  PAUSED = 3,

  /**
   * @generated from enum value: STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * @generated from enum value: STARTING = 5;
   */
  STARTING = 5,

  /**
   * @generated from enum value: PAUSING = 6;
   */
  PAUSING = 6,

  /**
   * @generated from enum value: STOPPING = 7;
   */
  STOPPING = 7,

  /**
   * @generated from enum value: REMOVING = 8;
   */
  REMOVING = 8,

  /**
   * @generated from enum value: RESUMING = 9;
   */
  RESUMING = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentStatus)
proto3.util.setEnumType(DeploymentStatus, "sf.substreams.sink.service.v1.DeploymentStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "RUNNING" },
  { no: 2, name: "FAILING" },
  { no: 3, name: "PAUSED" },
  { no: 4, name: "STOPPED" },
  { no: 5, name: "STARTING" },
  { no: 6, name: "PAUSING" },
  { no: 7, name: "STOPPING" },
  { no: 8, name: "REMOVING" },
  { no: 9, name: "RESUMING" },
]);

/**
 * @generated from message sf.substreams.sink.service.v1.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * @generated from field: sf.substreams.v1.Package substreams_package = 1;
   */
  substreamsPackage?: Package;

  /**
   * @generated from field: bool development_mode = 2;
   */
  developmentMode = false;

  /**
   * @generated from field: repeated sf.substreams.sink.service.v1.Parameter parameters = 3;
   */
  parameters: Parameter[] = [];

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "substreams_package", kind: "message", T: Package },
    { no: 2, name: "development_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "parameters", kind: "message", T: Parameter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.Parameter
 */
export class Parameter extends Message<Parameter> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Parameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.Parameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Parameter {
    return new Parameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Parameter {
    return new Parameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Parameter {
    return new Parameter().fromJsonString(jsonString, options);
  }

  static equals(a: Parameter | PlainMessage<Parameter> | undefined, b: Parameter | PlainMessage<Parameter> | undefined): boolean {
    return proto3.util.equals(Parameter, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status = DeploymentStatus.UNKNOWN;

  /**
   * deployment_id is a short name (max 8 characters) that uniquely identifies your deployment
   *
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  /**
   * @generated from field: map<string, string> services = 3;
   */
  services: { [key: string]: string } = {};

  /**
   * @generated from field: string reason = 4;
   */
  reason = "";

  /**
   * @generated from field: string motd = 5;
   */
  motd = "";

  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "services", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "motd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * @generated from field: sf.substreams.v1.Package substreams_package = 1;
   */
  substreamsPackage?: Package;

  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  /**
   * @generated from field: bool reset = 3;
   */
  reset = false;

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "substreams_package", kind: "message", T: Package },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reset", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status = DeploymentStatus.UNKNOWN;

  /**
   * @generated from field: map<string, string> services = 2;
   */
  services: { [key: string]: string } = {};

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * @generated from field: string motd = 4;
   */
  motd = "";

  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 2, name: "services", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "motd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.InfoRequest
 */
export class InfoRequest extends Message<InfoRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<InfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.InfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoRequest {
    return new InfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoRequest {
    return new InfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoRequest {
    return new InfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InfoRequest | PlainMessage<InfoRequest> | undefined, b: InfoRequest | PlainMessage<InfoRequest> | undefined): boolean {
    return proto3.util.equals(InfoRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.InfoResponse
 */
export class InfoResponse extends Message<InfoResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status = DeploymentStatus.UNKNOWN;

  /**
   * @generated from field: map<string, string> services = 2;
   */
  services: { [key: string]: string } = {};

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * @generated from field: sf.substreams.sink.service.v1.PackageInfo package_info = 4;
   */
  packageInfo?: PackageInfo;

  /**
   * @generated from field: sf.substreams.sink.service.v1.SinkProgress progress = 5;
   */
  progress?: SinkProgress;

  /**
   * @generated from field: string motd = 6;
   */
  motd = "";

  constructor(data?: PartialMessage<InfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.InfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 2, name: "services", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "package_info", kind: "message", T: PackageInfo },
    { no: 5, name: "progress", kind: "message", T: SinkProgress },
    { no: 6, name: "motd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoResponse {
    return new InfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoResponse {
    return new InfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoResponse {
    return new InfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InfoResponse | PlainMessage<InfoResponse> | undefined, b: InfoResponse | PlainMessage<InfoResponse> | undefined): boolean {
    return proto3.util.equals(InfoResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.SinkProgress
 */
export class SinkProgress extends Message<SinkProgress> {
  /**
   * @generated from field: uint64 last_processed_block = 1;
   */
  lastProcessedBlock = protoInt64.zero;

  constructor(data?: PartialMessage<SinkProgress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.SinkProgress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_processed_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinkProgress {
    return new SinkProgress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinkProgress {
    return new SinkProgress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinkProgress {
    return new SinkProgress().fromJsonString(jsonString, options);
  }

  static equals(a: SinkProgress | PlainMessage<SinkProgress> | undefined, b: SinkProgress | PlainMessage<SinkProgress> | undefined): boolean {
    return proto3.util.equals(SinkProgress, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.PackageInfo
 */
export class PackageInfo extends Message<PackageInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string output_module_name = 3;
   */
  outputModuleName = "";

  /**
   * @generated from field: string output_module_hash = 4;
   */
  outputModuleHash = "";

  constructor(data?: PartialMessage<PackageInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.PackageInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "output_module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "output_module_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackageInfo {
    return new PackageInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackageInfo {
    return new PackageInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackageInfo {
    return new PackageInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PackageInfo | PlainMessage<PackageInfo> | undefined, b: PackageInfo | PlainMessage<PackageInfo> | undefined): boolean {
    return proto3.util.equals(PackageInfo, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated sf.substreams.sink.service.v1.DeploymentWithStatus deployments = 1;
   */
  deployments: DeploymentWithStatus[] = [];

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployments", kind: "message", T: DeploymentWithStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.DeploymentWithStatus
 */
export class DeploymentWithStatus extends Message<DeploymentWithStatus> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 2;
   */
  status = DeploymentStatus.UNKNOWN;

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * @generated from field: sf.substreams.sink.service.v1.PackageInfo package_info = 4;
   */
  packageInfo?: PackageInfo;

  /**
   * @generated from field: sf.substreams.sink.service.v1.SinkProgress progress = 5;
   */
  progress?: SinkProgress;

  /**
   * @generated from field: string motd = 6;
   */
  motd = "";

  constructor(data?: PartialMessage<DeploymentWithStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.DeploymentWithStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "package_info", kind: "message", T: PackageInfo },
    { no: 5, name: "progress", kind: "message", T: SinkProgress },
    { no: 6, name: "motd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentWithStatus {
    return new DeploymentWithStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentWithStatus {
    return new DeploymentWithStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentWithStatus {
    return new DeploymentWithStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentWithStatus | PlainMessage<DeploymentWithStatus> | undefined, b: DeploymentWithStatus | PlainMessage<DeploymentWithStatus> | undefined): boolean {
    return proto3.util.equals(DeploymentWithStatus, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.RemoveRequest
 */
export class RemoveRequest extends Message<RemoveRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<RemoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.RemoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveRequest {
    return new RemoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveRequest {
    return new RemoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveRequest {
    return new RemoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveRequest | PlainMessage<RemoveRequest> | undefined, b: RemoveRequest | PlainMessage<RemoveRequest> | undefined): boolean {
    return proto3.util.equals(RemoveRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.RemoveResponse
 */
export class RemoveResponse extends Message<RemoveResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;

  constructor(data?: PartialMessage<RemoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.RemoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveResponse {
    return new RemoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveResponse {
    return new RemoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveResponse {
    return new RemoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveResponse | PlainMessage<RemoveResponse> | undefined, b: RemoveResponse | PlainMessage<RemoveResponse> | undefined): boolean {
    return proto3.util.equals(RemoveResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.PauseRequest
 */
export class PauseRequest extends Message<PauseRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<PauseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.PauseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PauseRequest {
    return new PauseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PauseRequest {
    return new PauseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PauseRequest {
    return new PauseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PauseRequest | PlainMessage<PauseRequest> | undefined, b: PauseRequest | PlainMessage<PauseRequest> | undefined): boolean {
    return proto3.util.equals(PauseRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.PauseResponse
 */
export class PauseResponse extends Message<PauseResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus = DeploymentStatus.UNKNOWN;

  constructor(data?: PartialMessage<PauseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.PauseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 2, name: "new_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PauseResponse {
    return new PauseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PauseResponse {
    return new PauseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PauseResponse {
    return new PauseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PauseResponse | PlainMessage<PauseResponse> | undefined, b: PauseResponse | PlainMessage<PauseResponse> | undefined): boolean {
    return proto3.util.equals(PauseResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.StopRequest
 */
export class StopRequest extends Message<StopRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<StopRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.StopRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopRequest {
    return new StopRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopRequest {
    return new StopRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopRequest {
    return new StopRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopRequest | PlainMessage<StopRequest> | undefined, b: StopRequest | PlainMessage<StopRequest> | undefined): boolean {
    return proto3.util.equals(StopRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.StopResponse
 */
export class StopResponse extends Message<StopResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus = DeploymentStatus.UNKNOWN;

  constructor(data?: PartialMessage<StopResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.StopResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 2, name: "new_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopResponse {
    return new StopResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopResponse {
    return new StopResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopResponse {
    return new StopResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopResponse | PlainMessage<StopResponse> | undefined, b: StopResponse | PlainMessage<StopResponse> | undefined): boolean {
    return proto3.util.equals(StopResponse, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.ResumeRequest
 */
export class ResumeRequest extends Message<ResumeRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<ResumeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.ResumeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResumeRequest {
    return new ResumeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResumeRequest {
    return new ResumeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResumeRequest {
    return new ResumeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResumeRequest | PlainMessage<ResumeRequest> | undefined, b: ResumeRequest | PlainMessage<ResumeRequest> | undefined): boolean {
    return proto3.util.equals(ResumeRequest, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.service.v1.ResumeResponse
 */
export class ResumeResponse extends Message<ResumeResponse> {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;

  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus = DeploymentStatus.UNKNOWN;

  constructor(data?: PartialMessage<ResumeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.service.v1.ResumeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 2, name: "new_status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResumeResponse {
    return new ResumeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResumeResponse {
    return new ResumeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResumeResponse {
    return new ResumeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResumeResponse | PlainMessage<ResumeResponse> | undefined, b: ResumeResponse | PlainMessage<ResumeResponse> | undefined): boolean {
    return proto3.util.equals(ResumeResponse, a, b);
  }
}

