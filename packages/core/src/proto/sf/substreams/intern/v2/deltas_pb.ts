// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sf/substreams/intern/v2/deltas.proto (package sf.substreams.internal.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { StoreDeltas } from "../../v1/deltas_pb.js";

/**
 * @generated from message sf.substreams.internal.v2.ModuleOutput
 */
export class ModuleOutput extends Message<ModuleOutput> {
  /**
   * @generated from field: string module_name = 1;
   */
  moduleName = "";

  /**
   * @generated from oneof sf.substreams.internal.v2.ModuleOutput.data
   */
  data: {
    /**
     * @generated from field: google.protobuf.Any map_output = 2;
     */
    value: Any;
    case: "mapOutput";
  } | {
    /**
     * @generated from field: sf.substreams.v1.StoreDeltas store_deltas = 3;
     */
    value: StoreDeltas;
    case: "storeDeltas";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated string logs = 4;
   */
  logs: string[] = [];

  /**
   * @generated from field: bool debug_logs_truncated = 5;
   */
  debugLogsTruncated = false;

  /**
   * @generated from field: bool cached = 6;
   */
  cached = false;

  constructor(data?: PartialMessage<ModuleOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.internal.v2.ModuleOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "map_output", kind: "message", T: Any, oneof: "data" },
    { no: 3, name: "store_deltas", kind: "message", T: StoreDeltas, oneof: "data" },
    { no: 4, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "debug_logs_truncated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "cached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleOutput {
    return new ModuleOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleOutput {
    return new ModuleOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleOutput {
    return new ModuleOutput().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleOutput | PlainMessage<ModuleOutput> | undefined, b: ModuleOutput | PlainMessage<ModuleOutput> | undefined): boolean {
    return proto3.util.equals(ModuleOutput, a, b);
  }
}

/**
 * @generated from message sf.substreams.internal.v2.Operations
 */
export class Operations extends Message<Operations> {
  /**
   * @generated from field: repeated sf.substreams.internal.v2.Operation operations = 1;
   */
  operations: Operation[] = [];

  constructor(data?: PartialMessage<Operations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.internal.v2.Operations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operations", kind: "message", T: Operation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operations {
    return new Operations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operations {
    return new Operations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operations {
    return new Operations().fromJsonString(jsonString, options);
  }

  static equals(a: Operations | PlainMessage<Operations> | undefined, b: Operations | PlainMessage<Operations> | undefined): boolean {
    return proto3.util.equals(Operations, a, b);
  }
}

/**
 * @generated from message sf.substreams.internal.v2.Operation
 */
export class Operation extends Message<Operation> {
  /**
   * @generated from field: sf.substreams.internal.v2.Operation.Type type = 1;
   */
  type = Operation_Type.SET;

  /**
   * @generated from field: uint64 ord = 2;
   */
  ord = protoInt64.zero;

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: bytes value = 4;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<Operation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.internal.v2.Operation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Operation_Type) },
    { no: 2, name: "ord", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation {
    return new Operation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation {
    return new Operation().fromJsonString(jsonString, options);
  }

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean {
    return proto3.util.equals(Operation, a, b);
  }
}

/**
 * @generated from enum sf.substreams.internal.v2.Operation.Type
 */
export enum Operation_Type {
  /**
   * @generated from enum value: SET = 0;
   */
  SET = 0,

  /**
   * @generated from enum value: SET_BYTES = 1;
   */
  SET_BYTES = 1,

  /**
   * @generated from enum value: SET_IF_NOT_EXISTS = 2;
   */
  SET_IF_NOT_EXISTS = 2,

  /**
   * @generated from enum value: SET_BYTES_IF_NOT_EXISTS = 3;
   */
  SET_BYTES_IF_NOT_EXISTS = 3,

  /**
   * @generated from enum value: APPEND = 4;
   */
  APPEND = 4,

  /**
   * @generated from enum value: DELETE_PREFIX = 5;
   */
  DELETE_PREFIX = 5,

  /**
   * @generated from enum value: SET_MAX_BIG_INT = 6;
   */
  SET_MAX_BIG_INT = 6,

  /**
   * @generated from enum value: SET_MAX_INT64 = 7;
   */
  SET_MAX_INT64 = 7,

  /**
   * @generated from enum value: SET_MAX_FLOAT64 = 8;
   */
  SET_MAX_FLOAT64 = 8,

  /**
   * @generated from enum value: SET_MAX_BIG_DECIMAL = 9;
   */
  SET_MAX_BIG_DECIMAL = 9,

  /**
   * @generated from enum value: SET_MIN_BIG_INT = 10;
   */
  SET_MIN_BIG_INT = 10,

  /**
   * @generated from enum value: SET_MIN_INT64 = 11;
   */
  SET_MIN_INT64 = 11,

  /**
   * @generated from enum value: SET_MIN_FLOAT64 = 12;
   */
  SET_MIN_FLOAT64 = 12,

  /**
   * @generated from enum value: SET_MIN_BIG_DECIMAL = 13;
   */
  SET_MIN_BIG_DECIMAL = 13,

  /**
   * @generated from enum value: SUM_BIG_INT = 14;
   */
  SUM_BIG_INT = 14,

  /**
   * @generated from enum value: SUM_INT64 = 15;
   */
  SUM_INT64 = 15,

  /**
   * @generated from enum value: SUM_FLOAT64 = 16;
   */
  SUM_FLOAT64 = 16,

  /**
   * @generated from enum value: SUM_BIG_DECIMAL = 17;
   */
  SUM_BIG_DECIMAL = 17,

  /**
   * @generated from enum value: SET_SUM_INT64 = 18;
   */
  SET_SUM_INT64 = 18,

  /**
   * @generated from enum value: SET_SUM_FLOAT64 = 19;
   */
  SET_SUM_FLOAT64 = 19,

  /**
   * @generated from enum value: SET_SUM_BIG_INT = 20;
   */
  SET_SUM_BIG_INT = 20,

  /**
   * @generated from enum value: SET_SUM_BIG_DECIMAL = 21;
   */
  SET_SUM_BIG_DECIMAL = 21,
}
// Retrieve enum metadata with: proto3.getEnumType(Operation_Type)
proto3.util.setEnumType(Operation_Type, "sf.substreams.internal.v2.Operation.Type", [
  { no: 0, name: "SET" },
  { no: 1, name: "SET_BYTES" },
  { no: 2, name: "SET_IF_NOT_EXISTS" },
  { no: 3, name: "SET_BYTES_IF_NOT_EXISTS" },
  { no: 4, name: "APPEND" },
  { no: 5, name: "DELETE_PREFIX" },
  { no: 6, name: "SET_MAX_BIG_INT" },
  { no: 7, name: "SET_MAX_INT64" },
  { no: 8, name: "SET_MAX_FLOAT64" },
  { no: 9, name: "SET_MAX_BIG_DECIMAL" },
  { no: 10, name: "SET_MIN_BIG_INT" },
  { no: 11, name: "SET_MIN_INT64" },
  { no: 12, name: "SET_MIN_FLOAT64" },
  { no: 13, name: "SET_MIN_BIG_DECIMAL" },
  { no: 14, name: "SUM_BIG_INT" },
  { no: 15, name: "SUM_INT64" },
  { no: 16, name: "SUM_FLOAT64" },
  { no: 17, name: "SUM_BIG_DECIMAL" },
  { no: 18, name: "SET_SUM_INT64" },
  { no: 19, name: "SET_SUM_FLOAT64" },
  { no: 20, name: "SET_SUM_BIG_INT" },
  { no: 21, name: "SET_SUM_BIG_DECIMAL" },
]);

